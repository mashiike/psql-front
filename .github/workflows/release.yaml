name: Release
on:
  push:
    branches:
      - "!**/*"
    tags:
      - "v*.*.*"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-linux-bin:
    strategy:
      matrix:
        GOARCH: ['amd64']
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - uses: actions/setup-go@v2
        with:
          go-version: 1.18
      - name: build bin
        run: |
          mkdir -p build
          go build -o build/psql-front_linux_$GOARCH -ldflags "-s -w -X main.Version=$GIT_VER" cmd/psql-front/main.go
        env:
          GIT_VER: ${{ github.ref }}
          GOARCH: ${{ matrix.GOARCH }}
        shell: bash
      - uses: actions/upload-artifact@v3
        with:
          name: build
          path: build/psql-front_*
  build-macos-bin:
    strategy:
      matrix:
        GOARCH: ['amd64']
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - uses: actions/setup-go@v2
        with:
          go-version: 1.18
      - name: build bin
        run: |
          mkdir -p build
          go build -o build/psql-front_darwin_$GOARCH -ldflags "-s -w -X main.Version=$GIT_VER" cmd/psql-front/main.go
        env:
          GIT_VER: ${{ github.ref }}
          GOARCH: ${{ matrix.GOARCH }}
        shell: bash
      - uses: actions/upload-artifact@v3
        with:
          name: build
          path: build/psql-front_*
  release-bin:
    needs: [build-linux-bin, build-macos-bin]
    runs-on: ubuntu-latest
    env:
      BIN_NAME: psql-front
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: load build
        id: load_build
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build
      - name: Zip binaries
        run: |
          cd ${{steps.load_build.outputs.download-path}}
          for file in ./* ; do
            mkdir $(echo ${file}|awk -F- '{print "${{ env.BIN_NAME }}_"$(NF-1)"_"$(NF)}') &&
            cp ${file} $(echo ${file}|awk -F- '{print "${{ env.BIN_NAME }}_"$(NF-1)"_"$(NF)}')/${{ env.BIN_NAME }} &&
            zip $(echo ${file}|awk -F- '{print "${{ env.BIN_NAME }}_"$(NF-1)"_"$(NF)}').zip -j $(echo ${file}|awk -F- '{print "${{ env.BIN_NAME }}_"$(NF-1)"_"$(NF)}')/${{ env.BIN_NAME }} ../README.md ../LICENSE;
          done
          shasum -a 256 *.zip > ${{ env.BIN_NAME }}_${{ steps.set-tag.outputs.version }}_checksums.txt
          ls -lR ./
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v3
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v2
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: Version=${{ github.ref }}
